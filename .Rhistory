bidprice_value_dataset[ , mean(value), by = device ]
dataset[ device == "" ]
bidprice_value_dataset[ device != "" ]
bidprice_value_dataset = bidprice_value_dataset[ device != "" ]
model_value = glm(value ~ bidprice_usd + agegroup + device + cohort + gender + verticalname,
data = bidprice_value_dataset, family = Gamma(link = "log"))
anova_results = anova(model_value, test = "LRT")
anova_results
bidprice_value_dataset[ , boxplot(value ~ cohort) ]
model_value = glm(value ~ bidprice_usd + agegroup + device + gender + verticalname,
data = bidprice_value_dataset, family = Gamma(link = "log"))
anova_results = anova(model_value, test = "LRT")
bidprice_effect = round(exp(model_value$coefficients["bidprice_usd"]), 3)
bidprice_effect
summary(model_value)
bidprice_value_dataset[ , mean(value), by = device ]
aov(value ~ device, bidprice_value_dataset)
aov_device = aov(value ~ device, bidprice_value_dataset)
summary(aov_device)
anova(aov_device)
bidprice_value_dataset[ , mean(value), by = device ]
boxplot(value ~ device, by = bidprice_value_dataset)
boxplot(value ~ device, data = bidprice_value_dataset)
bidprice_value_dataset
bidprice_value_dataset
model_value
desktop_other_diff = round(exp(model_value$coefficients["deviceDesktop"]), 3)
{r}
desktop_other_diff
desktop_other_diff = round(exp(model_value$coefficients["deviceOther"]), 3)
desktop_other_diff
1-0.914
round(exp(1/model_value$coefficients["deviceOther"]), 3)
1/model_value$coefficients["deviceOther"]
(1/model_value$coefficients["deviceOther"]
)
model_value$coefficients["deviceOther"]
desktop_other_diff = round(exp(model_value$coefficients["deviceOther"]), 3)
desktop_other_diff
desktop_other_diff = 1 - round(exp(model_value$coefficients["deviceOther"]), 3)
desktop_other_diff
bidprice_effect
model_value
summary(model_value)
anova(model_value)
anova(model_value, test = "LRT")
bidprice_value_dataset[ , mean(value), by = gender]
summary(model_value)
?t.test
t.test( bidprice_value_dataset[gender == "f"]$value, bidprice_value_dataset[gender == "m"]$value )
t.test( bidprice_value_dataset[gender == "f"]$value, bidprice_value_dataset[gender == ""]$value )
t.test( bidprice_value_dataset[gender == "m"]$value, bidprice_value_dataset[gender == ""]$value )
summary(mode_value)
summary(model_value)
t.test( bidprice_value_dataset[gender == "m"]$value, bidprice_value_dataset[gender == ""]$value )
m_missing_diff = t.test( bidprice_value_dataset[gender == "m"]$value, bidprice_value_dataset[gender == ""]$value )
f_missing_diff = t.test( bidprice_value_dataset[gender == "m"]$value, bidprice_value_dataset[gender == ""]$value )
boxplot(value ~ gender, data = bidprice_value_dataset)
m_effect = round(exp(model_value$coefficients["genderm"]), 3)
f_effect = = round(exp(model_value$coefficients["genderf"]), 3)
f_effect = round(exp(model_value$coefficients["genderf"]), 3)
f_effect
m_effect
t.test( bidprice_value_dataset[gender == "m"]$value, bidprice_value_dataset[gender == ""]$value )
bidprice_value_dataset[ , mean(value), by = gender]
m_effect
f_effect
bidprice_value_dataset[ , mean(value), by = gender]
89/84
1-89/84
m_effect
m_effect = 1 - round(exp(model_value$coefficients["genderm"]), 3)
m_effect
f_effect = 1 - round(exp(model_value$coefficients["genderf"]), 3)
f_effect
m_effect
bidprice_value_dataset
bidprice_value_dataset[ , mean(value), by = verticalname_factor]
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset )
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name")
?boxplot
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", las = 2)
par(mar=c(7,5,1,1))
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", las = 2)
par(mar=c(10,5,1,1))
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", las = 2)
par(mar=NULL)
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", las = 2)
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", horizontal = TRUE)
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", horizontal = TRUE)
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", horizontal = TRUE, las = 2)
par(mar)
?par
axis(1, 1:8, unique(bidprice_value_dataset$verticalname))
boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", xaxt = "n")
axis(1, 1:8, unique(bidprice_value_dataset$verticalname))
axis(1, 1:8, unique(bidprice_value_dataset$verticalname), srt = 45)
boxplot_ = boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", xaxt = "n")
axis(1, 1:8, boxplot_$names, srt = 45)
axis(1, 1:8, boxplot_$names, srt = 45. xpd = T)
axis(1, 1:8, boxplot_$names, srt = 45, xpd = T)
axis(1, 1:length( boxplot_$names), boxplot_$names, srt = 45T)
axis(1, 1:length( boxplot_$names), boxplot_$names, srt = 45)
text(1, 1:length( boxplot_$names), boxplot_$names, srt = 45)
text(1:length( boxplot_$names), boxplot_$names, srt = 45)
text(1:length( boxplot_$names), boxplot_$names, srt = 45, xpt = T)
text(1:length( boxplot_$names), boxplot_$names, srt = 45, xpd = T)
boxplot_ = boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", las = 2)
mar
par(mar)
par("mar")
par(mar=c(10, 4.1, 4.1, 2.1))
boxplot_ = boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", las = 2)
boxplot_ = boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "vertical name", las = 2, xlab = "")
par(mar=c(11, 4.1, 4.1, 2.1))
boxplot_ = boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "", las = 2)
bidprice_value_dataset
bidprice_value_dataset[ , .N, by = verticalname]
bidprice_effect
model_value
bidprice_effect
bidprice_value_dataset
bidprice_value_dataset[, bidprice_usd2 := round(bidprice_usd) ]
bidprice_value_dataset[ , mean(value), by = bidprice_usd2]
bidprice_effect
80*1.3
bidprice_effect
85*1.3
85*1.3*1.3
85*(1.3^1)
85*(1.3^2)
bidprice_value_dataset[ , mean(value), by = bidprice_usd2][order(bidprice_usd2)]
85*(1.3^2)
85*(1.3^3)
85*(1.3^4)
85*(2.3^4)
85*(1.3^4)
85 + 85 * 0.3
bidprice_value_dataset[ , mean(value), by = bidprice_usd2][order(bidprice_usd2)][ , plot(bidprice_usd2, V1) ]
lines( 0:4, 85 * (1.3^0:4))
85 * (1.3^0:4)
0:4
85 * (1.3^(0:4))
lines( 0:4, 85 * (1.3^(0:4)))
bidprice_effect
desktop_other_diff
bidprice_value_dataset
desktop_other_diff
boxplot(value ~ device, data = bidprice_value_dataset)
par(mar=c(11, 4.1, 4.1, 2.1))
boxplot_ = boxplot( value ~ verticalname_factor, data = bidprice_value_dataset,
xlab = "", las = 2)
bidprice_value_dataset[ , plot(bidprice_usd, value) ]
# Chunk 1: setup
library(data.table)
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# Reading the dataset
dataset = fread("../rokt_hKllMfFFdA.csv")
# Chunk 3
table(dataset$device)
# Chunk 4
dataset[ device == "mobile", device := "Mobile" ]
# Chunk 5
table(dataset$gender)
# Chunk 6
group_table = table(dataset$group)
group_proportion = group_table / sum(group_table)
group_proportion_print = round(group_proportion * 100, 2)
# Chunk 7
group_by_sessionid = dataset[ , length(unique(group)), by = "sessionid" ]
multiple_groups_per_session = group_by_sessionid[ V1 > 1, .N ]
# Chunk 8
mean_value_free_bid = dataset[ bidprice_usd == 0, mean(value, na.rm=T) ]
mean_value_nofree_bid = dataset[ bidprice_usd > 0, mean(value, na.rm=T) ]
mean_value_free_bid_print = round(mean_value_free_bid, 2)
mean_value_nofree_bid_print = round(mean_value_nofree_bid, 2)
# Chunk 9
dataset[bidprice_usd > 0, {
hist(bidprice_usd, main = "bidprice_usd", breaks = 25)
NULL
} ]
# Chunk 10
quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9, 0.99, 1)
quantile_table = dataset[ !is.na(value), quantile(value, probs = quantiles) ]
round(quantile_table, 2)
# Chunk 11
dataset[ order(-value) ][0:20, {
list(agegroup, bidprice_usd, campaigntimestamp,
device, gender, group, value, verticalname)
}]
# Chunk 12
# A bit weird to do index not in set of values greater than 2000, but
# we have to account for NA values.
dataset = dataset[ !1:.N %in% which(value > 2000) ]
# Chunk 13
data_check = function(dataset, interactive_mode=FALSE){
##### agegroup checks #####
# Allow character or factor so we can run the data check multiple times
agegroup_class = any(class(dataset$agegroup) %in% c("character", "factor"))
agegroup_categories_reference = c("18-25", "26-30", "31-35", "36-40", "41-45", "46-55", "56-65", "65+")
age_table = table(dataset$agegroup)
agegroup_categories = setequal(names(age_table), agegroup_categories_reference)
dataset[ , agegroup := {
factor(agegroup, levels = names(age_table), ordered = TRUE)
} ]
# stopifnot() is similiar to assert in Python
stopifnot(agegroup_class,
agegroup_categories)
if (interactive_mode) {
print("agegroup")
print(age_table)
}
##### bidprice_usd checks #####
bid_price_na = all( !is.na(dataset$bidprice_usd) )
bid_price_positive = all( dataset$bidprice_usd >= 0 )
bid_price_finite = all( is.finite(dataset$bidprice_usd) )
stopifnot(bid_price_finite,
bid_price_na,
bid_price_positive)
if (interactive_mode){
print("bidprice_usd")
print(summary(dataset$bidprice_usd))
}
##### group check #####
group_categories_reference = c("treatment", "control")
group_table = table(dataset$group)
group_split_proportion = (group_table / sum(group_table)) > 0.05
group_categories = setequal(names(group_table), group_categories_reference)
stopifnot(group_split_proportion,
group_categories)
if (interactive_mode){
print("group split")
print(group_split_proportion)
}
##### campaigntimestamp check #####
timestamp_class = any(class(dataset$campaigntimestamp) %in% c("character", "POSIXct"))
min_date = as.POSIXct("2020-01-01")
max_date = as.POSIXct(Sys.Date())
dataset[ , campaigntimestamp := {
as.POSIXct(campaigntimestamp, format = "%Y-%m-%d %H:%M:%S")
} ]
timestamp_in_range = all(
dataset$campaigntimestamp >= min_date &
dataset$campaigntimestamp <= max_date
)
stopifnot(timestamp_class,
timestamp_in_range)
if (interactive_mode){
print("campaigntimestamp range")
print(range(dataset$campaigntimestamp))
}
##### cohort #####
cohort_class = class(dataset$cohort) == "integer"
cohort_table = table(dataset$cohort)
invalid_cohort_code = dataset[ , {
char_year = as.character(year(campaigntimestamp))
char_month = sprintf("%02d", as.integer(month(campaigntimestamp)))
cohort_code = sprintf("%s%s", char_year, char_month)
which(cohort_code != cohort)
} ]
stopifnot(cohort_class,
length(invalid_cohort_code) == 0 )
if (interactive_mode){
print("cohort")
print(cohort_table)
}
##### device #####
device_class = class(dataset$device) %in% c("character", "factor")
dataset[device == "mobile", device := "Mobile" ]
dataset = dataset[device != ""]
device_reference = c("Desktop", "Mobile", "Other", "Tablet")
device_table = table(dataset$device)
device_categories = setequal(names(device_table), device_reference)
if (interactive_mode){
print("device table")
print(device_table)
}
stopifnot(device_class,
device_categories)
dataset[ , device := factor(device, levels = device_reference) ]
##### userhash #####
userhash_class = class(dataset$userhash) == "character"
stopifnot(userhash_class)
##### gender #####
gender_class = class(dataset$gender) %in% c("character", "factor")
gender_table = table(dataset$gender)
gender_reference = c("", "f", "m")
gender_categories = setequal(names(gender_table), gender_reference)
stopifnot(gender_class,
gender_categories)
dataset[ , gender := factor(gender, levels = gender_reference) ]
if (interactive_mode){
print("gender table")
print(gender_table)
}
##### sessionid #####
session_id_class = class(dataset$sessionid) == "character"
unique_users_per_session = dataset[ , {
length(unique(userhash))
}, by = "sessionid" ]
unique_users_in_session = all(unique_users_per_session$V1 == 1)
stopifnot(session_id_class,
unique_users_in_session)
##### verticalname #####
verticalname_class = class(dataset$verticalname) %in% c("character", "factor")
verticalname_reference = c("Finance", "Food and Beverage", "Loyalty and Samples",
"Media and Entertainment", "Retail", "Sports and Fitness", "Ticketing",
"Travel")
verticalname_table = table(dataset$verticalname)
verticalname_categories = setequal(names(verticalname_table), verticalname_reference)
stopifnot(verticalname_class,
verticalname_categories)
dataset[ , verticalname := factor(verticalname, levels = verticalname_reference) ]
if (interactive_mode){
print("verticalname table")
print(verticalname_table)
}
##### value #####
value_class = class(dataset$value) == "numeric"
value_non_na_finite = all( is.finite(dataset[!is.na(value)]$value) )
value_non_na_positive = all( dataset[!is.na(value)]$value > 0 )
stopifnot(value_class,
value_non_na_finite,
value_non_na_positive)
if (interactive_mode){
print("value summary")
print(summary(dataset$value))
}
}
# Chunk 14
# Run inside a try(), so the document does not crash
try({
data_check(dataset)
})
# Chunk 15
dataset = dataset[campaigntimestamp <= as.POSIXct(Sys.Date())]
data_check(dataset)
# Chunk 16
compute_conversion_rate = function(value, userhash){
converted_users = !is.na(value)
converted_hashes = unique(userhash[converted_users])
n_unique_conversions = length(converted_hashes)
unique_users = unique(userhash)
n_unique_users = length(unique_users)
n_unique_conversions/n_unique_users
}
overall_conversion_rate = dataset[ , compute_conversion_rate(value, userhash) ]
overall_conversion_rate_print = round( overall_conversion_rate * 100, 2 )
conversion_rate_by_cohort = dataset[ , {
conversion_rate = compute_conversion_rate(value, userhash)
conversion_rate_print = round(conversion_rate * 100, 2)
list(conversion_rate = conversion_rate,
"conversion rate %" = conversion_rate_print)
}, by = c("cohort") ]
# Chunk 17
conversion_rate_by_cohort[ , list(cohort, `conversion rate %`) ]
# Chunk 18
conversion_rate_by_cohort_group = dataset[ , {
conversion_rate = compute_conversion_rate(value, userhash)
time_year = year(campaigntimestamp[1])
time_month = month(campaigntimestamp[1])
date_ = sprintf("%s-%02d", time_year, time_month)
list( conversion_rate = conversion_rate, date_ = date_ )
}, by = c("cohort", "group") ]
conversion_rate_by_cohort_group[ , {
treatment_conversion = conversion_rate[group == "treatment"] * 100
control_conversion = conversion_rate[group == "control"] * 100
N = length(treatment_conversion)
date_names = as.character(date_[group == "treatment"])
plot(1:N,
ylim = range(conversion_rate * 100),
xaxt = "n", xlab = "Cohort (YYYY-MM)",
ylab = "Conversion rate %", type = "n", col = "red",
main = "Conversion rate per cohort and treatment")
axis(side = 1, at = 1:N, labels = date_names)
lines(1:N, treatment_conversion, col = "red")
lines(1:N, control_conversion, col = "blue")
lines(1:N, conversion_rate_by_cohort$conversion_rate*100, col = "green")
legend(x = "bottomleft",
legend = c("Treatment", "Control", "Aggregate"),
col = c("red", "blue", "green"), lty = 1, bty = "n")
NULL
} ]
# Chunk 19
run_model = FALSE
if (run_model){
conversion_rate_dataset = dataset[ ,{
unique_users = unique(userhash)
n_unique_users = length(unique_users)
converted_users = !is.na(value)
converted_hashes = unique(userhash[converted_users])
n_unique_conversions = length(converted_hashes)
list(
N_conversions = n_unique_conversions,
N_total = n_unique_users
)
}, by = c("cohort", "group") ]
conversion_rate_dataset[ , cohort_numeric := as.numeric(factor(cohort)) ]
conversion_rate_dataset[ , group_numeric := as.numeric(factor(group)) - 1 ]
jags_data = as.list(conversion_rate_dataset)
jags_data$N_cohorts_x_treatment = nrow(conversion_rate_dataset)
library(rjags)
model_string = "model{
# in JAGS, normal distribution is parameterised with the precision
beta1 ~ dnorm(0, 1/5)
treatment_effect ~ dnorm(0, 1)
beta0 ~ dnorm(0, 1/5)
for (i in 1:N_cohorts_x_treatment){
logit(p[i]) = beta0 +
beta1 * cohort_numeric[i] +
treatment_effect * group_numeric[i]
N_conversions[i] ~ dbin(p[i], N_total[i])
predict_N_conversions[i] ~ dbin(p[i], N_total[i])
}
}"
conversion_model = jags.model(textConnection(model_string), jags_data, n.chains = 1)
variable_names = c("beta1", "beta0", "treatment_effect", "predict_N_conversions")
conversion_posterior = coda.samples(conversion_model, variable.names = variable_names, n.iter = 1e5, thin = 25 )
conversion_posterior_dt = data.table(conversion_posterior[[1]])
conversion_posterior_dt[ , c("beta0_odds", "treatment_odds", "beta1_odds") := {
list(exp(beta0), exp(treatment_effect), exp(beta1))
} ]
posterior_names = names(conversion_posterior_dt)
predict_names = posterior_names[ grepl("predict_N", posterior_names) ]
posterior_predictive_list = lapply(conversion_posterior_dt[ , mget(predict_names) ], list)
conversion_rate_dataset[ , posterior_predictive := as.list(conversion_posterior_dt[ , mget(predict_names) ]) ]
save(conversion_posterior_dt, conversion_rate_dataset, file = "posterior.RData")
} else{
load("posterior.RData")
}
# Chunk 20
par(mfrow = c(1,2))
hist(conversion_posterior_dt$beta1, prob = T, main = "Cohort effect (lower is worse)",
xlim = c(-0.20, 0), breaks = 50)
abline(v = 0, col = "red")
hist(conversion_posterior_dt$treatment_effect, prob = T, main = "Treatment effect (higher is better)",
xlim = c(0, 0.3))
abline(v = 0, col = "red")
# Chunk 21
posterior_predicted_conversion = conversion_rate_dataset[ , {
list(predicted_conversion_rate = posterior_predictive[[1]] / N_total)
}, by = c("cohort", "group") ]
mean_table = posterior_predicted_conversion[ , mean(predicted_conversion_rate), by = c("cohort", "group") ][ , {
diff = V1[group == "treatment"] - V1[group == "control"]
list("Treatment - Control mean" = diff,
"Incrementality" = diff/V1[group == "treatment"])
}, by = "cohort" ]
# Chunk 22
par( mfrow = c(3,2) )
for (cohort_ in unique(posterior_predicted_conversion$cohort)){
temp_data = posterior_predicted_conversion[cohort == cohort_]
header = sprintf("Cohort: %s", cohort_)
conversion_treatment =
density_treatment = density(temp_data[group == "treatment"]$predicted_conversion_rate)
plot( density_treatment,
xlim = c(0.01, 0.04),
xlab = c("Predicted conversion rate"),
main = header)
lines( density(temp_data[group == "control"]$predicted_conversion_rate), col = "red" )
legend(x = "topright", col = c("black", "red"), lty = 1,
legend = c("Treatment", "Control"), bty = "n")
}
# Chunk 23
mean_table
# Chunk 24
bidprice_value_dataset = dataset[ !is.na(value) ]
bidprice_value_dataset[ , agegroup := factor(agegroup, ordered = FALSE) ]
# Chunk 25
bidprice_value_dataset = bidprice_value_dataset[ device != "" ]
# Chunk 26
model_value = glm(value ~ bidprice_usd + agegroup + device + cohort + gender + verticalname,
data = bidprice_value_dataset, family = Gamma(link = "log"))
anova_results = anova(model_value, test = "LRT")
# Chunk 27
boxplot(value ~ cohort, bidprice_value_dataset)
# Chunk 28
model_value = glm(value ~ bidprice_usd + agegroup + device + gender + verticalname,
data = bidprice_value_dataset, family = Gamma(link = "log"))
anova_results = anova(model_value, test = "LRT")
bidprice_effect = round(exp(model_value$coefficients["bidprice_usd"]), 3)
bidprice_value_dataset[ , {
plot(bidprice_usd, value)
} ]
desktop_other_diff = 1 - round(exp(model_value$coefficients["deviceOther"]), 3)
bidprice_value_dataset[ , range(value) ]
bidprice_value_dataset[ , range(value) ]
bidprice_value_dataset[ , {
plot(bidprice_usd, log(value))
} ]
bidprice_value_dataset[ , {
plot(bidprice_usd, log(value))
NULL
} ]
bidprice_value_dataset[ , {
plot(bidprice_usd, value)
NULL
} ]
